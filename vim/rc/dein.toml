# plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

# color schema
[[plugins]]
repo = 'cocopon/iceberg.vim'

# file finder
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add= '''
    nnoremap <silent>sd :Denite buffer<CR>
    nnoremap <silent>sf :Denite file/rec<CR>
    nnoremap <silent>sg :Denite grep<CR>
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction  
'''

# command line finder
[[plugins]]
repo = 'junegunn/fzf.vim'

# tree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <silent><Space>t :NERDTreeToggle<CR>
    nnoremap <silent><Space>T :NERDTree<CR>
'''

# show indent
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

# auto complete
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = '''
#     " Use deoplete.
#     let g:deoplete#enable_at_startup = 1
#     " Use smartcase.
#     call deoplete#custom#option('smart_case', v:true)
#     call deoplete#custom#option('auto_complete_delay', 150)
#     " use auto select
#     set completeopt+=noinsert
#     " <C-h>, <BS>: close popup and delete backword char.
#     inoremap <expr><C-h> deoplete#smart_close_popup()."<C-h>"
#     inoremap <expr><BS>  deoplete#smart_close_popup()."<C-h>"
#     inoremap <expr><S-TAB>  pumvisible() ? "<C-p>" : "<S-TAB>" 
#     " <CR>: insert selected word \
#     imap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# hook_add = '''
#     let g:neosnippet#enable_snipmate_compatibility = 1
#     let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets'
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'

# terminal
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    let g:neoterm_shell = &shell
    let g:neoterm_size = 8
    let g:neoterm_autoscroll = 1
    " nnoremap <silent> <Space>c :botright Tnew<CR>:T source ~/.bash_profile<CR>
    nnoremap <silent> <Space>c :botright Tnew<CR>
    tnoremap <silent> <ESC> <C-\><C-n>
    tnoremap <silent> jj <C-\><C-n>
    nnoremap <silent> <Space>e :TREPLSendLine<CR>
    vnoremap <silent> <Space>e V:TREPLSendSelection<CR>
'''

# bar
[[plugins]]
repo = 'vim-airline/vim-airline'

# bar thema
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
    let g:AirlineTheme = "minimalist"
'''

# resize window
[[plugins]]
repo = 'simeji/winresizer'

# git
[[plugins]]
repo = "airblade/vim-gitgutter"

# git
[[plugins]]
repo = "tpope/vim-fugitive"

# easymotion
[[plugins]]
repo = "Lokaltog/vim-easymotion"
hook_add = '''
    let g:EasyMotion_do_mapping = 0 
    "nmap w <Plug>(easymotion-overwin-w)
    nmap f <Plug>(easymotion-overwin-f2)
'''

# language server
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
# on_i = 1
merged = '0'
hook_add = '''
    " You will have bad experience for diagnostic messages when it's default 4000.
    set updatetime=300
    " don't give |ins-completion-menu| messages.
    set shortmess+=c
    " always show signcolumns
    set signcolumn=yes
    
    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    
    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()
    
    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    
    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    
    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    
    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    
    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction
    
    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')
    
    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)
    
    " Remap for format selected region
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)
    
    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end
    
    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)
    
    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)
    
    " Create mappings for function text object, requires document symbols feature of languageserver.
    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)
    
    " Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
    nmap <silent> <TAB> <Plug>(coc-range-select)
    xmap <silent> <TAB> <Plug>(coc-range-select)
    
    " Use `:Format` to format current buffer
    command! -nargs=0 Format :call CocAction('format')
    
    " Use `:Fold` to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
    
    " use `:OR` for organize import of current buffer
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
    
    " Add status line support, for integration with other plugin, checkout `:h coc-status`
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
    
    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    "nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    "" Show commands
    " "nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    "" Find symbol of current document
    "nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    "" Search workspace symbols
    "nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    "" Do default action for next item.
    "nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    "" Do default action for previous item.
    "nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    "" Resume latest coc list
    "nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

# snippet
[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'


# gtags
#[[plugins]]
#repo = 'lighttiger2505/gtags.vim'
#hook_add = '''
#    " Options
#    let g:Gtags_Auto_Map = 0
#    let g:Gtags_OpenQuickfixWindow = 1
#    " Keymap
#    " nnoremap <silent> <Space>f :Gtags -f %<CR>
#    " nnoremap <silent> <Space>j :GtagsCursor<CR> 
#    " Show definetion of function cousor word on quickfix
#    nnoremap <silent> <Space>g :<C-u>exe("Gtags ".expand('<cword>'))<CR>
#    " Show reference of cousor word on quickfix
#    nnoremap <silent> <Space>G :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
#'''
#
## gtags auto generate
#[[plugins]]
#repo = 'jsfaint/gen_tags.vim'
#hook_add = '''
#    let g:gen_tags#ctags_auto_gen = 1
#    let g:gen_tags#gtags_auto_gen = 1
#'''
